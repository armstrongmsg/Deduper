#!/usr/bin/python

#
#   Federal University of Campina Grande
#   Distributed Systems Laboratory
#
#   Author: Armstrong Mardilson da Silva Goes
#   Contact: armstrongmsg@lsd.ufcg.edu.br
#

#
# This script is used to summarize the data generated by deduper
# The expected input pattern is described in Argument_Parser class
# The expected data files format is described in Summarizer class
#

import sys

class Machine_Results:
	
    def __init__(self, duplication_levels):
        self.results = [0 for i in duplication_levels]

    def __str__(self):
        representation = ""
        for i in xrange(len(self.results)):
            representation += str(self.results[i]) + ","
        return representation[0:len(representation) - 1]

class File_Result:

    def __init__(self, machines, duplication_levels):
       
       assert machines != None
       assert duplication_levels != None
       self.results = [Machine_Results(duplication_levels) for i in machines]

    def __str__(self):
        representation = ""
        for i in xrange(len(self.results)):
            representation += "machine " + str(i) + "\n"
            representation += str(self.results[i]) + "\n"
        return representation

class Summarizer:
    
    """
      Expected file pattern:

      duplication level #1
      machine #1
      machine #2
      machine #3
      ...
      machine #n
      blank line
      duplication level #2
      machine #1
      machine #2
      machine #3
      blank line
      ...
      ...
      duplication level #m
      machine #1
      machine #2
      machine #3
      ...
      machine #n
    """
     
    def summarize(self, results_files_names, machines, duplication_levels):

        assert results_files_names != None
        assert machines != None
        assert duplication_levels != None

        files_results = File_Result(machines, duplication_levels)

        for result_file_name in results_files_names:
            file = open(result_file_name, "r")

            for duplication_level in xrange(len(duplication_levels)):
                for machine in xrange(len(machines)):
                    line = file.readline()
                    tokens = line.split()
                    result = tokens[1]
                    current_machine_result = files_results.results[machine]
                    current_machine_result.results[duplication_level] += int(result) 
                file.readline()
            file.close()

        for machine_results in files_results.results:
            for duplication_level in xrange(len(duplication_levels)):
                machine_results.results[duplication_level] /= float(len(results_files_names))
      
        print files_results                           

class Argument_Parser:
   
    """
      Expected args pattern

      1.program name 
      2.number of files names
      3.number of machines
      4.number of duplication levels
      5-.files names
    """
 
    def __init__(self, args):
        assert args != None

        self.args = args
        self.number_of_files_names = int(args[1])
        self.number_of_machines = int(args[2])
        self.number_of_duplication_levels = int(args[3])
   
    def parse_files_names(self):
        files_names = []        

        for i in xrange(self.number_of_files_names):
            files_names.append(self.args[4 + i])
        
        return files_names

    def parse_machines(self):
        return self.number_of_machines

    def parse_duplication_levels(self):
        return self.number_of_duplication_levels

argument_parser = Argument_Parser(sys.argv)
results_files_names = argument_parser.parse_files_names()
number_of_machines = argument_parser.parse_machines()
number_of_duplication_levels = argument_parser.parse_duplication_levels()

machines = [i for i in xrange(0, number_of_machines)]
duplication_levels = [i/10.0 for i in xrange(0, number_of_duplication_levels)]

Summarizer().summarize(results_files_names, machines, duplication_levels)

